add_trace(y=~seasonally_adjusted, mode="lines")
plotly(inflation, x=~row.names, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
plot_ly(inflation, x=~row.names, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
while (!require("plotly")) install.packages("plotly")
while (!require("zoo")) install.packages("zoo")
while (!require("Quandl")) install.packages("Quandl")
while (!require("timeSeries")) install.packages("timeSeries")
plot_ly(inflation, x=~row.names, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
class(inflation$inflation)
inflation$seasonally_adjusted <- as.numeric(scale(decompose(infl, "additive")$random))
inflation$inflation <- as.numeric(scale(inflation$inflation))
plot_ly(inflation, x=~row.names, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
plot_ly(inflation, x=~rownames, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
inflation$date <- as.Date(as.yearqtr(as.character(rownames(inflation))))
plot_ly(inflation, x=~date, y=~inflation, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
inflation$seasonality <- as.numeric(scale(decompose(infl, "additive")$seasonality))
decompose(infl, "additive")
a <- decompose(infl, "additive")
inflation$seasonality <- as.numeric(scale(decompose(infl, "additive")$seasonal))
plot_ly(inflation, x=~date, y=~seasonality, type="scatter", mode="lines") %>%
add_trace(y=~seasonally_adjusted, mode="lines")
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, then we aggregate by quarter, then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
while (!require("plotly")) install.packages("plotly")
while (!require("zoo")) install.packages("zoo")
while (!require("Quandl")) install.packages("Quandl")
while (!require("timeSeries")) install.packages("timeSeries")
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$date <- NULL
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
View(data)
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, then we aggregate by quarter, then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$Row.names <- NULL
View(data)
plot(data$inflation)
# Import interest rate (Central Bank of Brazil, SELIC)
# The quarterly rate is computed as a weighted (by number of days) mean of the interest rate obained daily.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
View(interest)
colnames(interest) <- "interest"
# Import interest rate (Central Bank of Brazil, SELIC)
# The quarterly rate is computed as a weighted (by number of days) mean of the interest rate obained daily.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
interest2 <- data.frame(Quandl("BCB/1178", type="zoo"))
View(interest2)
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
rm(interest2)
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$date <- data$Row.names
data$Row.names <- NULL
while (!require("zoo")) install.packages("zoo")
while (!require("plotly")) install.packages("plotly")
while (!require("zoo")) install.packages("zoo")
while (!require("Quandl")) install.packages("Quandl")
while (!require("timeSeries")) install.packages("timeSeries")
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$date <- NULL
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, then we aggregate by quarter, then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$date <- data$Row.names
data$Row.names <- NULL
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, then we aggregate by quarter, then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$Row.names <- NULL
?merge
data$date <- rownames(data)
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$Row.names <- NULL
data$date <- rownames(data)
data$Row.names <- NULL
# Import expected inflation (Central Bank of Brazil, Expected inflation)
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$date <- as.yearqtr(as.Date(expInfl$date))
expInfl <- aggregate(expInfl$exp_inflation/100, by=list(expInfl$date), "mean")
rownames(expInfl) <- expInfl$Group.1
expInfl$exp_inflation <- expInfl$x
expInfl$exp_inflation_qtr <- (expInfl$exp_inflation+1)^(1/3)-1
expInfl$Group.1 <- NULL
expInfl$x <- NULL
data <- merge(data, expInfl, by="row.names", all=TRUE)
while (!require("plotly")) install.packages("plotly")
while (!require("zoo")) install.packages("zoo")
while (!require("Quandl")) install.packages("Quandl")
while (!require("timeSeries")) install.packages("timeSeries")
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, then we aggregate by quarter, then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily annualized. We collapse by quarter and take the current interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import expected inflation (Central Bank of Brazil, Expected inflation)
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
View(expInfl)
expInfl$date <- as.yearqtr(as.Date(expInfl$date))
# Import expected inflation (Central Bank of Brazil, Expected inflation)
#
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$date <- as.yearqtr(as.Date(expInfl$date))
expInfl <- aggregate(expInfl$exp_inflation/100, by=list(expInfl$date), "mean")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$date <- as.yearqtr(as.Date(expInfl$date))
?aggregate
expInfl2 <- aggregate(expInfl$exp_inflation/100, by=list(expInfl$date), "tail")
View(expInfl2)
expInfl2 <- aggregate(expInfl$exp_inflation, by=list(expInfl$date), "tail")
View(expInfl)
View(expInfl2)
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
expInfl2 <- aggregate(expInfl$exp_inflation, by=list(expInfl$date), "tail")
expInfl2 <- aggregate(expInfl$exp_inflation, by=list(expInfl$dateqtr), "tail")
?aggregate
?which
which("-12-31" in expInfl$date)
which("-12-31" %in% expInfl$date)
expInfl[which("-12-31" %in% expInfl$date),]
expInfl[which("2001-12-31" %in% expInfl$date),]
?aggregate
?aggregate
?order
setorder(expInfl, "inflation")
expInfl.setorder(expInfl, "inflation")
order(expInfl, "inflation")
?order
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
expInfl2 <- aggregate(expInfl[order("date"),"exp_inflation"], by=list(expInfl$dateqtr), "tail")
expInfl[order("date"),"exp_inflation"]
expInfl
expInfl[order("date"),]
expInfl[with(expInfl, order("date")),]
length(expInfl[with(expInfl, order("date")),])
rowcount(expInfl[with(expInfl, order("date")),])
rows(expInfl[with(expInfl, order("date")),])
row(expInfl[with(expInfl, order("date")),])
expInfl[order(expInfl$date),]
expInfl2 <- aggregate(expInfl[order(expInfl$date),], by=list(expInfl$dateqtr), "tail")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
expInfl2 <- aggregate(expInfl[order(expInfl$date),], by=list(expInfl$dateqtr), "tail")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
expInfl2 <- aggregate(expInfl[order(expInfl$date),"date"], by=list(expInfl$dateqtr), "tail")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
expInfl$dateqtr <- as.yearqtr(as.Date(expInfl$date))
expInfl2 <- aggregate(expInfl[order(expInfl$date),"expInfl"], by=list(expInfl$dateqtr), "tail")
expInfl2 <- aggregate(expInfl[order(expInfl$date),"exp_inflation"], by=list(expInfl$dateqtr), "tail")
class(expInfl$date)
?read.csv
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv")
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClassses=c("Date", "numeric"))
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We simply divide by 100 to get in decimal terms.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl2 <- aggregate(expInfl[order(expInfl$date),"exp_inflation"], by=list(expInfl$dateqtr), "tail")
?subset
?subset
expInfl2 <- subset(expInfl, format.Date(date, "%m")=="12" & format.Date(date, "%d")=="31")
expInfl2 <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
View(expInfl2)
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We take the last value for each quarter.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl2 <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
rownames(expInfl) <- expInfl$Group.1
expInfl$exp_inflation <- expInfl$x
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We take the last value for each quarter.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl2 <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
rownames(expInfl) <- expInfl$Group.1
expInfl$exp_inflation <- expInfl$x
expInfl$Group.1 <- NULL
expInfl$x <- NULL
data <- merge(data, expInfl, by="row.names", all=TRUE)
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We take the last value for each quarter.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, aggregate by quarter, and then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily and represents the annual rate.
# We collapse by quarter and take the current annual interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We take the last value for each quarter.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
rownames(expInfl) <- expInfl$Group.1
expInfl$exp_inflation <- expInfl$x
expInfl$Group.1 <- NULL
expInfl$x <- NULL
data <- merge(data, expInfl, by="row.names", all=TRUE)
rm(expInfl)
View(data)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- Quandl("BCB/1211")
View(gdpDeflator)
gdpDeflator$dateqtr <- as.yearqtr(gdpDeflator$Date)
expInfl2 <- subset(expInfl, (format.Date(date, "%m")=="12" & format.Date(date, "%d")=="31") | (format.Date(date, "%m")=="09" & format.Date(date, "%d")=="31"))
?Quandl
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- Quandl("BCB/1211", collapse="quarterly")
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- Quandl("BCB/1211")
, collapse="quarterly"
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- Quandl("BCB/1211", collapse="quarterly")
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- Quandl("BCB/1211", collapse="quarterly", type="zoo")
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- data.frame(Quandl("BCB/1211", collapse="quarterly", type="zoo"))
colnames(gdpDeflator) <- gdp_deflator
colnames(gdpDeflator) <- "gdp_deflator"
data <- merge(data, gdpDeflator, by="row.names", all=TRUE)
data$date <- rownames(data)
data$Row.names <- NULL
while (!require("plotly")) install.packages("plotly")
while (!require("zoo")) install.packages("zoo")
while (!require("Quandl")) install.packages("Quandl")
while (!require("timeSeries")) install.packages("timeSeries")
# Set up
rm(list = ls())
setwd("/Users/jdimas/GitHub/ABMNK/real_data")
Quandl.api_key("iyqies2dKE9mRZpR2zUm")
# Import Output Gap (IPEA)
data <- read.csv("ipea-CC37_Produto-Potencial-trimestral-1993t1-2017t3.csv", sep=";", skip=5, header=FALSE, col.names=c("date", "pot_gdp", "real_gdp", "output_gap", "X1", "X2", "X3", "X4"))
data <- data[,c("date","output_gap")]
data$date <- as.yearqtr(data$date, format="%Y T%q")
rownames(data) <- data$date
data$output_gap <- as.numeric(gsub('%', '', data$output_gap))/100
# Import inflation (Central Bank of Brazil, IPCA)
# We download monthly inflation, aggregate by quarter, and then we annualize.
# As a result we have annualized quarterly inflation.
inflation <- Quandl("BCB/433")
inflation$Date <- as.yearqtr(inflation$Date)
# Aggregate by quarter
inflation <- aggregate(inflation$Value/100+1, by=list(inflation$Date), "prod")
# Annualize
inflation$inflation <- (inflation$x^4)-1
rownames(inflation) <- inflation$Group.1
inflation$Group.1 <- NULL
inflation$x <- NULL
data <- merge(data, inflation, by="row.names", all=TRUE)
rm(inflation)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import interest rate (Central Bank of Brazil, SELIC)
# The interest rate is computed daily and represents the annual rate.
# We collapse by quarter and take the current annual interest rate at the end of each quarter.
interest <- data.frame(Quandl("BCB/1178", collapse="quarterly", type="zoo"))
colnames(interest) <- "interest"
data <- merge(data, interest, by="row.names", all=TRUE)
rm(interest)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import expected inflation (Central Bank of Brazil, Expected inflation)
# The expected inflation is computed daily and represents the expected inflation for the next 12 months.
# We take the last value for each quarter.
expInfl <- read.csv("bcb-expected inflation-2001jan-2018fev.csv", colClasses=c("Date", "numeric"))
expInfl$dateqtr <- as.yearqtr(expInfl$date)
expInfl <- aggregate(expInfl$"exp_inflation", by=list(expInfl$dateqtr), "tail", n=1)
rownames(expInfl) <- expInfl$Group.1
expInfl$exp_inflation <- expInfl$x
expInfl$Group.1 <- NULL
expInfl$x <- NULL
data <- merge(data, expInfl, by="row.names", all=TRUE)
rm(expInfl)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Import GDP deflator (Central Bank of Brazil, GDP deflator, yearly)
gdpDeflator <- data.frame(Quandl("BCB/1211", collapse="quarterly", type="zoo"))
colnames(gdpDeflator) <- "gdp_deflator"
data <- merge(data, gdpDeflator, by="row.names", all=TRUE)
rownames(data) <- data$Row.names
data$date <- rownames(data)
data$Row.names <- NULL
# Put all variables together
data$date <- as.Date(as.yearqtr(as.character(data$date)))
# Save a CSV consolidated with all variables
write.csv(data, "data.csv", row.names = FALSE)
